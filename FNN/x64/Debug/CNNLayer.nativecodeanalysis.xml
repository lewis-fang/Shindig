<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.h</FILENAME>
      <LINE>70</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>取消对 NULL 指针“vImageData”的引用。</DESCRIPTION>
    <FUNCTION>image::initImage</FUNCTION>
    <DECORATED>?initImage@image@@QEAA_NH@Z</DECORATED>
    <FUNCLINE>42</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>44</LINE>
        <COLUMN>29</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>46</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>47</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>47</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>49</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>50</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>50</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>52</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>50</LINE>
        <COLUMN>31</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>50</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>47</LINE>
        <COLUMN>36</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>47</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>55</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>55</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>57</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>57</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>59</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>59</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>61</LINE>
        <COLUMN>26</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>59</LINE>
        <COLUMN>32</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>59</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>57</LINE>
        <COLUMN>31</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>57</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>55</LINE>
        <COLUMN>36</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>55</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>65</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>66</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>67</LINE>
        <COLUMN>14</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>declaration</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>“vImageData”可能为 NULL</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>68</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>68</LINE>
        <COLUMN>20</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>进入此循环(假定“i&lt;block”)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>70</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>usage</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>已取消对“vImageData”的引用，但可能仍为 NULL</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.h</FILENAME>
      <LINE>244</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>取消对 NULL 指针“vWeight”的引用。</DESCRIPTION>
    <FUNCTION>kernal::initKernal</FUNCTION>
    <DECORATED>?initKernal@kernal@@QEAAXN@Z</DECORATED>
    <FUNCLINE>227</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>229</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>230</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>230</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>232</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>233</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>233</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>235</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>233</LINE>
        <COLUMN>29</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>233</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>230</LINE>
        <COLUMN>32</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>230</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>238</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>239</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>241</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>declaration</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>“vWeight”可能为 NULL</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>242</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>242</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>进入此循环(假定“i&lt;blockSoze”)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>244</LINE>
        <COLUMN>14</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>usage</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>已取消对“vWeight”的引用，但可能仍为 NULL</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.h</FILENAME>
      <LINE>259</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>取消对 NULL 指针“alignedWeight”的引用。</DESCRIPTION>
    <FUNCTION>kernal::initKernal</FUNCTION>
    <DECORATED>?initKernal@kernal@@QEAAXN@Z</DECORATED>
    <FUNCLINE>227</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>229</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>230</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>230</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>232</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>233</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>233</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>235</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>233</LINE>
        <COLUMN>29</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>233</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>230</LINE>
        <COLUMN>32</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>230</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>238</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>239</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>241</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>242</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>242</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>244</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>242</LINE>
        <COLUMN>32</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>242</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>246</LINE>
        <COLUMN>6</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>247</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>248</LINE>
        <COLUMN>16</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>declaration</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>“alignedWeight”可能为 NULL</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>249</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>250</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>250</LINE>
        <COLUMN>22</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>进入此循环(假定“ch&lt;channel”)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>252</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>252</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>进入此循环(假定“r&lt;row”)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>254</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>254</LINE>
        <COLUMN>22</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>进入此循环(假定“c&lt;col”)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>256</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>257</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>258</LINE>
        <COLUMN>51</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
        <FILENAME>CNNLayer.h</FILENAME>
        <LINE>259</LINE>
        <COLUMN>57</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>usage</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>已取消对“alignedWeight”的引用，但可能仍为 NULL</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.h</FILENAME>
      <LINE>515</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>枚举类型“layerType”未设定范围。相比于 "enum"，首选 "enum class" (Enum.3)。</DESCRIPTION>
    <FUNCTION>CNNCalc::setlayerType</FUNCTION>
    <DECORATED>?setlayerType@CNNCalc@@QEAAXW4layerType@@@Z</DECORATED>
    <FUNCLINE>515</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.h</FILENAME>
      <LINE>516</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26812</DEFECTCODE>
    <DESCRIPTION>枚举类型“PaddingMethod”未设定范围。相比于 "enum"，首选 "enum class" (Enum.3)。</DESCRIPTION>
    <FUNCTION>CNNCalc::setPaddingMethod</FUNCTION>
    <DECORATED>?setPaddingMethod@CNNCalc@@QEAAXW4PaddingMethod@@@Z</DECORATED>
    <FUNCLINE>516</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::cmplementSize。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::{ctor}</FUNCTION>
    <DECORATED>??0CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::cmplementSize</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::CNNKernalsRotate180。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::{ctor}</FUNCTION>
    <DECORATED>??0CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::CNNKernalsRotate180</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::CNNKernals。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::{ctor}</FUNCTION>
    <DECORATED>??0CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::CNNKernals</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::CNNKernalsRotate180Simd。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::{ctor}</FUNCTION>
    <DECORATED>??0CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::CNNKernalsRotate180Simd</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::kernalCols。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::{ctor}</FUNCTION>
    <DECORATED>??0CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::kernalCols</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::kernalChannel。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::{ctor}</FUNCTION>
    <DECORATED>??0CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::kernalChannel</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::kernalRows。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::{ctor}</FUNCTION>
    <DECORATED>??0CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::kernalRows</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::neuroNums。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::{ctor}</FUNCTION>
    <DECORATED>??0CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::neuroNums</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::cmplementSizePoolImge。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::{ctor}</FUNCTION>
    <DECORATED>??0CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::cmplementSizePoolImge</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::dkernal。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::{ctor}</FUNCTION>
    <DECORATED>??0CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::dkernal</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>3</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::stride。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::{ctor}</FUNCTION>
    <DECORATED>??0CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>3</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::stride</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>277</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::im2row</FUNCTION>
    <DECORATED>?im2row@CNNCalc@@AEAAXUimage@@UtrpDim@@HPEAM@Z</DECORATED>
    <FUNCLINE>272</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>277</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::im2row</FUNCTION>
    <DECORATED>?im2row@CNNCalc@@AEAAXUimage@@UtrpDim@@HPEAM@Z</DECORATED>
    <FUNCLINE>272</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>277</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::im2row</FUNCTION>
    <DECORATED>?im2row@CNNCalc@@AEAAXUimage@@UtrpDim@@HPEAM@Z</DECORATED>
    <FUNCLINE>272</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>277</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::im2row</FUNCTION>
    <DECORATED>?im2row@CNNCalc@@AEAAXUimage@@UtrpDim@@HPEAM@Z</DECORATED>
    <FUNCLINE>272</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>277</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::im2row</FUNCTION>
    <DECORATED>?im2row@CNNCalc@@AEAAXUimage@@UtrpDim@@HPEAM@Z</DECORATED>
    <FUNCLINE>272</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>277</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::im2row</FUNCTION>
    <DECORATED>?im2row@CNNCalc@@AEAAXUimage@@UtrpDim@@HPEAM@Z</DECORATED>
    <FUNCLINE>272</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>280</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::im2row</FUNCTION>
    <DECORATED>?im2row@CNNCalc@@AEAAXUimage@@UtrpDim@@HPEAM@Z</DECORATED>
    <FUNCLINE>272</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>293</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::im2row</FUNCTION>
    <DECORATED>?im2row@CNNCalc@@AEAAXUimage@@UtrpDim@@HPEAM@Z</DECORATED>
    <FUNCLINE>272</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>293</LINE>
      <COLUMN>81</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::im2row</FUNCTION>
    <DECORATED>?im2row@CNNCalc@@AEAAXUimage@@UtrpDim@@HPEAM@Z</DECORATED>
    <FUNCLINE>272</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>293</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 + ，然后将结果转换到 8 字节值。在调用运算符 + 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::im2row</FUNCTION>
    <DECORATED>?im2row@CNNCalc@@AEAAXUimage@@UtrpDim@@HPEAM@Z</DECORATED>
    <FUNCLINE>272</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>293</LINE>
      <COLUMN>120</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::im2row</FUNCTION>
    <DECORATED>?im2row@CNNCalc@@AEAAXUimage@@UtrpDim@@HPEAM@Z</DECORATED>
    <FUNCLINE>272</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>310</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::actImage2row</FUNCTION>
    <DECORATED>?actImage2row@CNNCalc@@AEAAXXZ</DECORATED>
    <FUNCLINE>303</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>329</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::actImage2row</FUNCTION>
    <DECORATED>?actImage2row@CNNCalc@@AEAAXXZ</DECORATED>
    <FUNCLINE>303</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>330</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::actImage2row</FUNCTION>
    <DECORATED>?actImage2row@CNNCalc@@AEAAXXZ</DECORATED>
    <FUNCLINE>303</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>331</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 + ，然后将结果转换到 8 字节值。在调用运算符 + 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::actImage2row</FUNCTION>
    <DECORATED>?actImage2row@CNNCalc@@AEAAXXZ</DECORATED>
    <FUNCLINE>303</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>611</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 + ，然后将结果转换到 8 字节值。在调用运算符 + 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::activate</FUNCTION>
    <DECORATED>?activate@CNNCalc@@AEAAMMH@Z</DECORATED>
    <FUNCLINE>596</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1157</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dConvolutionXSimd</FUNCTION>
    <DECORATED>?dConvolutionXSimd@BackLayer@CNNCalc@@QEAA_NUimage@@00PEAUkernal@@HHAEAU3@@Z</DECORATED>
    <FUNCLINE>1127</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1157</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dConvolutionXSimd</FUNCTION>
    <DECORATED>?dConvolutionXSimd@BackLayer@CNNCalc@@QEAA_NUimage@@00PEAUkernal@@HHAEAU3@@Z</DECORATED>
    <FUNCLINE>1127</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1265</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dPadding</FUNCTION>
    <DECORATED>?dPadding@BackLayer@CNNCalc@@QEAAXUimage@@AEAU3@HH@Z</DECORATED>
    <FUNCLINE>1263</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1266</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dPadding</FUNCTION>
    <DECORATED>?dPadding@BackLayer@CNNCalc@@QEAAXUimage@@AEAU3@HH@Z</DECORATED>
    <FUNCLINE>1263</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1321</LINE>
      <COLUMN>22</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 + ，然后将结果转换到 8 字节值。在调用运算符 + 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dactivate</FUNCTION>
    <DECORATED>?dactivate@BackLayer@CNNCalc@@QEAAMMH@Z</DECORATED>
    <FUNCLINE>1306</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1409</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dPoolingSimd</FUNCTION>
    <DECORATED>?dPoolingSimd@BackLayer@CNNCalc@@QEAA_NUimage@@0HHHAEAU3@@Z</DECORATED>
    <FUNCLINE>1390</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1409</LINE>
      <COLUMN>90</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dPoolingSimd</FUNCTION>
    <DECORATED>?dPoolingSimd@BackLayer@CNNCalc@@QEAA_NUimage@@0HHHAEAU3@@Z</DECORATED>
    <FUNCLINE>1390</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1420</LINE>
      <COLUMN>59</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dPoolingSimd</FUNCTION>
    <DECORATED>?dPoolingSimd@BackLayer@CNNCalc@@QEAA_NUimage@@0HHHAEAU3@@Z</DECORATED>
    <FUNCLINE>1390</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1420</LINE>
      <COLUMN>98</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dPoolingSimd</FUNCTION>
    <DECORATED>?dPoolingSimd@BackLayer@CNNCalc@@QEAA_NUimage@@0HHHAEAU3@@Z</DECORATED>
    <FUNCLINE>1390</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1441</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dPoolingSimd</FUNCTION>
    <DECORATED>?dPoolingSimd@BackLayer@CNNCalc@@QEAA_NUimage@@0HHHAEAU3@@Z</DECORATED>
    <FUNCLINE>1390</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1441</LINE>
      <COLUMN>91</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dPoolingSimd</FUNCTION>
    <DECORATED>?dPoolingSimd@BackLayer@CNNCalc@@QEAA_NUimage@@0HHHAEAU3@@Z</DECORATED>
    <FUNCLINE>1390</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1452</LINE>
      <COLUMN>59</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dPoolingSimd</FUNCTION>
    <DECORATED>?dPoolingSimd@BackLayer@CNNCalc@@QEAA_NUimage@@0HHHAEAU3@@Z</DECORATED>
    <FUNCLINE>1390</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1452</LINE>
      <COLUMN>98</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dPoolingSimd</FUNCTION>
    <DECORATED>?dPoolingSimd@BackLayer@CNNCalc@@QEAA_NUimage@@0HHHAEAU3@@Z</DECORATED>
    <FUNCLINE>1390</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1473</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dPoolingSimd</FUNCTION>
    <DECORATED>?dPoolingSimd@BackLayer@CNNCalc@@QEAA_NUimage@@0HHHAEAU3@@Z</DECORATED>
    <FUNCLINE>1390</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1473</LINE>
      <COLUMN>91</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dPoolingSimd</FUNCTION>
    <DECORATED>?dPoolingSimd@BackLayer@CNNCalc@@QEAA_NUimage@@0HHHAEAU3@@Z</DECORATED>
    <FUNCLINE>1390</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1484</LINE>
      <COLUMN>59</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dPoolingSimd</FUNCTION>
    <DECORATED>?dPoolingSimd@BackLayer@CNNCalc@@QEAA_NUimage@@0HHHAEAU3@@Z</DECORATED>
    <FUNCLINE>1390</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1484</LINE>
      <COLUMN>98</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::dPoolingSimd</FUNCTION>
    <DECORATED>?dPoolingSimd@BackLayer@CNNCalc@@QEAA_NUimage@@0HHHAEAU3@@Z</DECORATED>
    <FUNCLINE>1390</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1504</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 + ，然后将结果转换到 8 字节值。在调用运算符 + 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::innerPadding</FUNCTION>
    <DECORATED>?innerPadding@BackLayer@CNNCalc@@QEAAXUimage@@AEAU3@HH@Z</DECORATED>
    <FUNCLINE>1499</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1505</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 + ，然后将结果转换到 8 字节值。在调用运算符 + 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::innerPadding</FUNCTION>
    <DECORATED>?innerPadding@BackLayer@CNNCalc@@QEAAXUimage@@AEAU3@HH@Z</DECORATED>
    <FUNCLINE>1499</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1581</LINE>
      <COLUMN>58</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::outPaddingSimd</FUNCTION>
    <DECORATED>?outPaddingSimd@BackLayer@CNNCalc@@QEAA_NUimage@@AEAU3@HH@Z</DECORATED>
    <FUNCLINE>1563</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1581</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 - ，然后将结果转换到 8 字节值。在调用运算符 - 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::outPaddingSimd</FUNCTION>
    <DECORATED>?outPaddingSimd@BackLayer@CNNCalc@@QEAA_NUimage@@AEAU3@HH@Z</DECORATED>
    <FUNCLINE>1563</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1582</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::outPaddingSimd</FUNCTION>
    <DECORATED>?outPaddingSimd@BackLayer@CNNCalc@@QEAA_NUimage@@AEAU3@HH@Z</DECORATED>
    <FUNCLINE>1563</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1636</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1636</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1636</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 - ，然后将结果转换到 8 字节值。在调用运算符 - 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1636</LINE>
      <COLUMN>81</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1636</LINE>
      <COLUMN>76</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 - ，然后将结果转换到 8 字节值。在调用运算符 - 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1637</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1637</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1637</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1647</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1647</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1647</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 - ，然后将结果转换到 8 字节值。在调用运算符 - 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1647</LINE>
      <COLUMN>74</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1647</LINE>
      <COLUMN>69</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 - ，然后将结果转换到 8 字节值。在调用运算符 - 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1648</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1648</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1648</LINE>
      <COLUMN>67</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>算术溢出: 使用 4 字节值上的运算符 * ，然后将结果转换到 8 字节值。在调用运算符 * 之前将值强制转换为宽类型可避免溢出(io.2)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::TMatrixKernalSimd</FUNCTION>
    <DECORATED>?TMatrixKernalSimd@BackLayer@CNNCalc@@QEAA_NPEBUkernal@@PEAU3@H@Z</DECORATED>
    <FUNCLINE>1616</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1656</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::BackLayer::Loss。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::{ctor}</FUNCTION>
    <DECORATED>??0BackLayer@CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>1656</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::BackLayer::Loss</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1656</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::BackLayer::shadowKernals。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::{ctor}</FUNCTION>
    <DECORATED>??0BackLayer@CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>1656</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::BackLayer::shadowKernals</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1656</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::BackLayer::lossType。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::{ctor}</FUNCTION>
    <DECORATED>??0BackLayer@CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>1656</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::BackLayer::lossType</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1656</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::BackLayer::rowImageDactImage。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::{ctor}</FUNCTION>
    <DECORATED>??0BackLayer@CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>1656</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::BackLayer::rowImageDactImage</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>E:\2-C++\FNN5\FNN\</FILEPATH>
      <FILENAME>CNNLayer.cpp</FILENAME>
      <LINE>1656</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>未初始化变量 CNNCalc::BackLayer::rowImageDbzImage。始终初始化成员变量(type.6)。</DESCRIPTION>
    <FUNCTION>CNNCalc::BackLayer::{ctor}</FUNCTION>
    <DECORATED>??0BackLayer@CNNCalc@@QEAA@XZ</DECORATED>
    <FUNCLINE>1656</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>CNNCalc::BackLayer::rowImageDbzImage</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>